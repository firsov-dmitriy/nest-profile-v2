// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  firstName String?
  middleName String?
  lastName String?
  password String
  refreshToken String?
  accessToken String?
  role Role @default(USER)
  posts Post[]
  products Product[]
  cart Cart?
}

enum Role {
  USER
  ADMIN
}

model Post {
  id Int @id @default(autoincrement())
  title String
  text String
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  published  Boolean    @default(false)
  authorId  String
  author User @relation(fields: [authorId], references: [id])
  imageUrl String?
}

model Product {
  id  Int @id @default(autoincrement())
  name String
  description String
  createdAt DateTime @default(now())
  published Boolean    @default(false)
  authorId  String
  price Float
  cartItems   CartItem[]
  author User @relation(fields: [authorId], references: [id])
}



model Cart {
  id  String  @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  items CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cart      Cart      @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}